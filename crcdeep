#!/usr/bin/env python

import argparse
from collections import OrderedDict
import os
import sys
import zlib

from pprint import pprint

def crc_file(fileName):
	prev = 0
	for eachLine in open(fileName,"rb"):
		prev = zlib.crc32(eachLine, prev)
	return "{:08x}".format(prev & 0xFFFFFFFF)

def crc_dir(dir_path):
	crcz = OrderedDict()
	drop_hidden = True
	for root, dirs, files in os.walk(dir_path):
		if drop_hidden == True:
			files = [f for f in files if not f[0] == '.']
			dirs[:] = [d for d in dirs if not d[0] == '.']
		for file in files:
			crcz[os.path.join(root, file)] = crc_file(os.path.join(root, file)) 
	return crcz

def parse_args():
	parser = argparse.ArgumentParser(description='Reursively calculate CRC Checksums for files in the current working directory.')
	parser.add_argument('-d', '--dir', metavar='DIR', dest='path', type=str, default='.', help='An alternative directory you want the script to recurse.') 
	return parser.parse_args()

def main(args):
	for path, crc in crc_dir(args.path).iteritems():
		print("{}  {}".format(crc, path))

if __name__ == '__main__':
	main(parse_args())

