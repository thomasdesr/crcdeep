#!/usr/bin/env python
from __future__ import division, print_function
import argparse
import os
import sys
import zlib

from pprint import pprint

def slurp(filename, chunk_size = 4096):
	try:
		with open(filename, 'rb') as f:
			for chunk in iter(lambda: f.read(chunk_size), ''):
				yield chunk
	except IOError:
		print("Unable to open '{}'.".format(filename), file=sys.stderr)

def crc_file(filename):
	prev = 0
	for chunk in slurp(filename):
		prev = zlib.crc32(chunk, prev)
	return "{:08x}".format(prev & 0xFFFFFFFF)

def crc_dir(dir_path, drop_hidden = True):
	for root, dirs, files in os.walk(dir_path):
		if drop_hidden == True:
			files = [f for f in files if not f[0] == '.']
			dirs[:] = [d for d in dirs if not d[0] == '.']  # Not 100% sure why this works, but it seems dirs from os.walk is passed by reference, not value
		for file in files:
			yield os.path.join(root, file), crc_file(os.path.join(root, file))

def parse_args():
	parser = argparse.ArgumentParser(description='Reursively calculate CRC Checksums for files in the current working directory.')
	# parser.add_argument('-d', '--dir', metavar='DIR', dest='path', type=str, default='.', help='An alternative directory you want the script to recurse.') 
	parser.add_argument('paths', metavar='files', nargs='+')
	parser.add_argument('-r', action='store_true', help="Enables  recursive  mode.  All  subdirectories are traversed. Please note that recursive mode cannot be used to examine all files of a given file extension. For example, calling md5deep -r *.txt will examine all files in directories  that  end  in .txt.")
	return parser.parse_args()

def main(args):
	if args.r is False:
		for file in args.paths:
			if os.path.isdir(file):
				print('{}: Is a directory'.format(file))
			else:
				print("{:9s} {}".format(crc_file(file), file))
	else:
		for dir in args.paths:
			for path, crc in crc_dir(dir):
				print("{:9s} {}".format(crc, path))

if __name__ == '__main__':
	main(parse_args())

